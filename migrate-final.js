#!/usr/bin/env node

// Script de migration final vers Railway
import mysql from 'mysql2/promise';

// Configuration de la base locale
const localConfig = {
  host: 'localhost',
  port: 3306,
  user: 'root',
  password: '',
  database: 'MDN_SUITE'
};

// Configuration Railway
const railwayConfig = {
  host: 'centerbeam.proxy.rlwy.net',
  port: 26824,
  user: 'root',
  password: 'eNMmLvQjDIBHXwPmEqaVutQQDKTwEKsD',
  database: 'railway',
  ssl: { rejectUnauthorized: false }
};

async function finalMigrate() {
  let localConnection = null;
  let railwayConnection = null;

  try {
    console.log('üöÄ Migration finale vers Railway...\n');

    // Connexions
    localConnection = await mysql.createConnection(localConfig);
    railwayConnection = await mysql.createConnection(railwayConfig);
    console.log('‚úÖ Connexions √©tablies\n');

    // D√©sactiver les contraintes de cl√©s √©trang√®res temporairement
    await railwayConnection.execute('SET FOREIGN_KEY_CHECKS = 0');
    console.log('üîì Contraintes de cl√©s √©trang√®res d√©sactiv√©es\n');

    // Vider toutes les tables
    console.log('üßπ Nettoyage complet des tables...');
    await railwayConnection.execute('DELETE FROM tasks');
    await railwayConnection.execute('DELETE FROM employees');
    await railwayConnection.execute('DELETE FROM users');
    await railwayConnection.execute('DELETE FROM documents');
    console.log('‚úÖ Tables nettoy√©es\n');

    // Migrer les utilisateurs avec gestion des r√¥les
    console.log('üë§ Migration des utilisateurs...');
    await migrateUsersFixed(localConnection, railwayConnection);

    // Migrer les employ√©s
    console.log('üë• Migration des employ√©s...');
    await migrateEmployeesFixed(localConnection, railwayConnection);

    // Migrer les t√¢ches
    console.log('‚úÖ Migration des t√¢ches...');
    await migrateTasksFixed(localConnection, railwayConnection);

    // R√©activer les contraintes
    await railwayConnection.execute('SET FOREIGN_KEY_CHECKS = 1');
    console.log('üîí Contraintes de cl√©s √©trang√®res r√©activ√©es\n');

    // V√©rifier les donn√©es migr√©es
    console.log('üìä V√©rification des donn√©es migr√©es...');
    await verifyMigration(railwayConnection);

    console.log('üéâ Migration finale termin√©e avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes :');
    console.log('1. Mettre √† jour les variables Vercel');
    console.log('2. Red√©ployer l\'application');
    console.log('3. Tester : https://mdn-management-v5.vercel.app/api/test-connection');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error.message);
  } finally {
    if (localConnection) await localConnection.end();
    if (railwayConnection) await railwayConnection.end();
  }
}

async function migrateUsersFixed(localConn, railwayConn) {
  try {
    const [users] = await localConn.execute('SELECT * FROM users');
    console.log(`  üìä ${users.length} utilisateurs trouv√©s`);

    for (const user of users) {
      // Normaliser le r√¥le
      let role = 'user';
      if (user.role) {
        if (user.role.includes('admin') || user.role.includes('Admin')) {
          role = 'admin';
        } else if (user.role.includes('manager') || user.role.includes('Manager')) {
          role = 'manager';
        }
      }

      // S√©parer le nom
      const nameParts = (user.name || 'User Name').split(' ');
      const firstName = nameParts[0] || 'User';
      const lastName = nameParts.slice(1).join(' ') || 'Name';

      await railwayConn.execute(`
        INSERT INTO users (id, email, password, first_name, last_name, role, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        user.id,
        user.email,
        user.password_hash || 'admin123',
        firstName,
        lastName,
        role,
        user.created_at || new Date(),
        user.updated_at || new Date()
      ]);
    }
    console.log(`  ‚úÖ ${users.length} utilisateurs migr√©s`);
  } catch (error) {
    console.error(`  ‚ùå Erreur migration utilisateurs:`, error.message);
  }
}

async function migrateEmployeesFixed(localConn, railwayConn) {
  try {
    const [employees] = await localConn.execute('SELECT * FROM employees');
    console.log(`  üìä ${employees.length} employ√©s trouv√©s`);

    for (const emp of employees) {
      await railwayConn.execute(`
        INSERT INTO employees (id, first_name, last_name, email, phone, position, department, hire_date, status, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        emp.id,
        emp.first_name,
        emp.last_name,
        emp.email,
        emp.phone,
        emp.position,
        emp.department,
        emp.hire_date,
        emp.status || 'active',
        emp.created_at || new Date(),
        emp.updated_at || new Date()
      ]);
    }
    console.log(`  ‚úÖ ${employees.length} employ√©s migr√©s`);
  } catch (error) {
    console.error(`  ‚ùå Erreur migration employ√©s:`, error.message);
  }
}

async function migrateTasksFixed(localConn, railwayConn) {
  try {
    const [tasks] = await localConn.execute('SELECT * FROM tasks');
    console.log(`  üìä ${tasks.length} t√¢ches trouv√©es`);

    for (const task of tasks) {
      // V√©rifier que l'utilisateur assign√© existe
      let assignedTo = task.assigned_to;
      if (assignedTo) {
        const [userExists] = await railwayConn.execute('SELECT id FROM users WHERE id = ?', [assignedTo]);
        if (userExists.length === 0) {
          assignedTo = 1; // Assigner √† l'admin par d√©faut
        }
      }

      await railwayConn.execute(`
        INSERT INTO tasks (id, title, description, status, priority, assigned_to, created_by, due_date, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        task.id,
        task.title,
        task.description,
        task.status || 'todo',
        task.priority || 'medium',
        assignedTo,
        task.created_by || 1,
        task.due_date,
        task.created_at || new Date(),
        task.updated_at || new Date()
      ]);
    }
    console.log(`  ‚úÖ ${tasks.length} t√¢ches migr√©es`);
  } catch (error) {
    console.error(`  ‚ùå Erreur migration t√¢ches:`, error.message);
  }
}

async function verifyMigration(railwayConn) {
  try {
    const [users] = await railwayConn.execute('SELECT COUNT(*) as count FROM users');
    const [employees] = await railwayConn.execute('SELECT COUNT(*) as count FROM employees');
    const [tasks] = await railwayConn.execute('SELECT COUNT(*) as count FROM tasks');
    const [documents] = await railwayConn.execute('SELECT COUNT(*) as count FROM documents');

    console.log(`  üë§ Utilisateurs: ${users[0].count}`);
    console.log(`  üë• Employ√©s: ${employees[0].count}`);
    console.log(`  ‚úÖ T√¢ches: ${tasks[0].count}`);
    console.log(`  üìÑ Documents: ${documents[0].count}`);
  } catch (error) {
    console.error(`  ‚ùå Erreur v√©rification:`, error.message);
  }
}

// Ex√©cuter la migration
finalMigrate().catch(console.error);
